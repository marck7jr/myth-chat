@using MythChat.Web.Components.Pages.Chats.Models

@inject ApiServiceClient apiServiceClient
@inject ILogger<ChatsUserInput> logger

<EditForm @ref="editForm" Model="Model" OnValidSubmit="OnValidSubmit">
    <MudGrid>
        <MudItem xs="12">
            <MudTextField Disabled="IsLoading"
                          Immediate="true"
                          Label="Message"
                          Adornment="Adornment.End"
                          AdornmentIcon="@Icons.Material.Filled.Send"
                          OnAdornmentClick="OnValidSubmit"
                          Variant="Variant.Outlined"
                          @bind-Value="Model.Message" />
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    public class ChatUserInputModel
    {
        public string? Message { get; set; }
    }

    private EditForm editForm = null!;

    [Parameter] public string? Agent { get; set; } = "Zeus";
    [Parameter] public string? Region { get; set; } = "Greece";
    [Parameter] public bool IsLoading { get; set; } = false;
    [Parameter] public EventCallback<bool> IsLoadingChanged { get; set; }

    [Parameter] public EventCallback<ChatsEntry> OnMessageSent { get; set; }

    protected List<ChatsEntry> Entries { get; set; } = new();
    protected ChatUserInputModel Model { get; set; } = new();

    private async Task OnValidSubmit()
    {
        if (string.IsNullOrWhiteSpace(Model.Message))
        {
            return;
        }

        IsLoading = true;

        await IsLoadingChanged.InvokeAsync(IsLoading);

        StateHasChanged();

        var userEntry = new ChatsEntry
            {
                Author = "User",
                Content = Model.Message,
            };

        Entries.Add(userEntry);

        await OnMessageSent.InvokeAsync(userEntry);

        try
        {
            var history = Entries.Select(x => new SendMessageCommandHistoryItem
                {
                    Author = x.Author,
                    Content = x.Content,
                });

            var command = new SendMessageCommand
                {
                    Agent = Agent,
                    History = history.ToList(),
                    Input = Model.Message,
                    Region = Region,
                };

            var response = await apiServiceClient.Chat.PostAsync(command);
            var output = response?.Output;

            var agentEntry = new ChatsEntry
                {
                    Author = Agent,
                    Content = output,
                    IsFromAgent = true,
                };

            Entries.Add(agentEntry);

            await OnMessageSent.InvokeAsync(agentEntry);
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Failed to send message");
        }
        finally
        {
            IsLoading = false;
            await IsLoadingChanged.InvokeAsync(IsLoading);

            StateHasChanged();
        }

        Model = new();
    }
}
