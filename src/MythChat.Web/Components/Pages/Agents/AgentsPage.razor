@page "/agents"

@inject ApiServiceClient apiServiceClient
@inject NavigationManager _navigationManager
 
@rendermode InteractiveServer
<h3>Agents</h3>

<MudSelect HelperText="Helper text" @bind-Value="@selectedType" T="string" Label="With Helper" Variant="Variant.Text" >
    @foreach (var item in Types)
    {
        <MudSelectItem Value="@item" />
    }
</MudSelect>
<MudGrid Justify="Justify.Center">
    @foreach (var item in Regions)
    {
        
        <MudItem md="3">
            <div style="position: relative; cursor: pointer" @onclick="@(()=>SelectRegion(item))">

                <MudImage Src="@(item+".jpg")" Height="250" Width="250" Alt=""/>
                <MudPaper
                Elevation="0"
                Class="rounded-0"
                Style="position: absolute; bottom: 0; left: 0; padding: 25px; width: 50vw; opacity: 0.6">

                    @* Hack: the text is needed to give the transparent part the proper height, but will also display the text in 0.6 transparency *@
                    <MudText Typo="Typo.h6">@item</MudText>
                </MudPaper>
            </div>
        </MudItem>
    }
</MudGrid>
<MudGrid>
    @if(Agents is not null){
        @foreach (var item in Agents)
        {
            <MudItem>
                <MudButton @onclick='() => _navigationManager.NavigateTo("chat?type="+selectedType+"&group="+selectedRegion+"&name="+item)' Variant="Variant.Filled" Color="Color.Primary">@item</MudButton>   
            </MudItem>
        }
    }
</MudGrid>

@code {
    private IEnumerable<string?> Agents = null;
    private IEnumerable<string?> Regions = [];
    private IEnumerable<string?> Types = [];
    private string selectedRegion = "";
    private string selectedType = "Deity";

    protected override async Task OnInitializedAsync()
    {
        var responseType = await apiServiceClient.Chat.Agents.Types.GetAsync();
        var types = responseType?.Types?.Select(x => x?.Name);
        var responseRegion = await apiServiceClient.Chat.Agents.Groups.GetAsync();
        var regions = responseRegion?.Groups?.Select(x => x?.Name);
        Regions = regions ?? [];
        Types = types ?? [];
        
        StateHasChanged();
    }
    private async Task SelectRegion(string? region)
    {
        if(region is null)
            return;
        selectedRegion = region;
        var responseAgents = await apiServiceClient.Chat.Agents[selectedType][selectedRegion].GetAsync();
        var agents = responseAgents?.Agents?.Select(x => x?.Name);
        Agents = agents ?? [];
        StateHasChanged();
    }
}
