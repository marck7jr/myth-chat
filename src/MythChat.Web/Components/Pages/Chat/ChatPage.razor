@page "/chat"
@page "/chat/{channel}"

@rendermode InteractiveServer

@using MythChat.Web.Components.Pages.Chat.Components
@using MythChat.Web.Components.Pages.Chat.Models

@inject IHistoryService HistoryService

<MudContainer>
    <MudText Class="fw-bolder" Typo="Typo.h4">Chats</MudText>

    <MudGrid Class="mt-4">
        <MudItem xs="12">
            @if (Entries.Any())
            {
                <MudPaper Class="p-4">
                    @if (IsLoading)
                    {
                        <MudProgressCircular Color="Color.Info" Indeterminate="true" />
                    }

                    @foreach (var entry in Entries)
                    {
                        <div class="d-flex my-4">
                            <MudText Typo="Typo.body1" Class="fw-bold" Color="@(entry.IsFromAgent ? Color.Info : Color.Inherit)">
                                @(entry.Author):
                            </MudText>
                            <MudText Typo="Typo.body1" Class="ms-2">
                                @entry.Content
                            </MudText>
                        </div>
                    }
                </MudPaper>
            }
        </MudItem>
        <MudItem xs="12">
            <ChatUserInput OnMessageSent="OnMessageSent"
                           @bind-Channel="@Channel"
                           @bind-Agent="@Agent"
                           @bind-Region="@Region"
                           @bind-IsLoading="IsLoading" />
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    [Parameter] public string? Channel { get; set; }

    [SupplyParameterFromQuery] public string? Agent { get; set; }
    [SupplyParameterFromQuery] public string? Region { get; set; }

    protected List<ChatEntry> Entries { get; set; } = [];
    protected bool IsLoading { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        if (string.IsNullOrEmpty(Channel))
        {
            return;
        }

        var entry = await HistoryService.GetEntryAsync(Channel);

        if (entry is null)
        {
            return;
        }

        Agent = entry.Agent;
        Region = entry.Group;

        StateHasChanged();
    }

    private async Task OnMessageSent(ChatEntry entry)
    {
        Entries.Add(entry);

        await InvokeAsync(StateHasChanged);
    }
}
